(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{202:function(t,e,a){"use strict";a.r(e);var n=a(0),o=Object(n.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"creating-a-panel-of-normals-pon-for-exomes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-panel-of-normals-pon-for-exomes","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating a panel of normals (PoN) for exomes")]),t._v(" "),a("p",[t._v('"Somatic" variants that occur in a panel of normal samples can be considered sequencing artifacts. We can generate a VCF file to filter against by calling variants in normal samples that look "clean", i.e. absent of tumor contamination. We use a similar variant calling strategy as for the somatic variant calling in tumor samples')]),t._v(" "),a("p",[t._v("For each normal sample call variants with "),a("code",[t._v("Strelka2")]),t._v(" and "),a("code",[t._v("MuTect2")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"strelka2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strelka2","aria-hidden":"true"}},[t._v("#")]),t._v(" Strelka2")]),t._v(" "),a("p",[t._v("Run "),a("code",[t._v("Manta")]),t._v(" to seed indel calling, otherwise run as if the normal sample is an unmatched tumor sample. Parse output with "),a("code",[t._v("bcftools")]),t._v(", subsetting on variants supported by more than one alternate read.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$MANTA/configManta.py \\\n    --referenceFasta $REF \\\n    --runDir pon/manta/$NORMAL_NAME \\\n    --exome \\\n    --callRegions $TARGETS\n    --bam $NORMAL_BAM\n\npon/manta/$NORMAL_NAME/runWorkflow.py --mode local\n\n$STRELKA/configureStrelkaGermlineWorkflow.py \\\n    --ref $REF \\\n    --runDir mutations/pon/strelka2/$NORMAL_NAME \\\n    --exome \\\n    --callRegions $TARGETS \\\n    --indelCandidates pon/manta/$NORMAL_NAME/results/variants/candidateSmallIndels.vcf.gz \\\n    --bam $NORMAL_BAM\n\nbcftools filter \\\n    --include 'FORMAT/AD[0:1]>1' \\\n    pon/strelka2/$NORMAL_NAME/results/variants/variants.vcf.gz | \\\n    bcftools norm \\\n    --fasta-ref $REF \\\n    -check-ref s \\\n    --multiallelics -both \\\n    --output-type z \\\n    --output pon/$NORMAL_NAME.strelka2.vcf.gz\n\ntabix --preset vcf pon/$NORMAL_NAME.strelka2.vcf.gz\n")])])]),a("h3",{attrs:{id:"mutect2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutect2","aria-hidden":"true"}},[t._v("#")]),t._v(" MuTect2")]),t._v(" "),a("p",[a("code",[t._v("MuTect2")]),t._v(" provides a variant calling mode for normal samples for this purpose. Process the output similarly to above. Fix some VCF header tags so that the files can be combined downstream. As opposed to the somatic variant calling in tumor samples, here retain any calls at multiallelic loci.")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$GATK Mutect2 \\\n    --reference $REF \\\n    --intervals $TARGETS \\\n    --input $NORMAL_BAM \\\n     --tumor $NORMAL_NAME \\\n     --output pon/mutect2/$NORMAL_NAME.vcf.gz\n\nbcftools filter \\\n    --include 'FORMAT/AD[0:1]>1' \\\n    pon/mutect2/$NORMAL_NAME.vcf.gz | \\\n    sed -e 's/ID=RU,Number=1/ID=RU,Number=A/' -e 's/ID=AD,Number=R/ID=AD,Number=./' |\n    bcftools norm \\\n    --fasta-ref $REF \\\n    --check-ref s \\\n    --multiallelics -both \\\n    --output-type z \\\n    --output pon/$NORMAL_NAME.mutect2.vcf.gz\n\ntabix --preset vcf pon/$NORMAL_NAME.mutect2.vcf.gz\n")])])]),a("p",[t._v("Now, combine all individual VCFs from all normal samples. This requires a "),a("a",{attrs:{href:"https://samtools.github.io/bcftools/howtos/plugins.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("bcftools")]),t._v(" plugin"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bcftools merge \\\n    --merge none \\\n    --output-type z \\\n    --output pon.vcf.gz \\\n    pon/*vcf.gz\n\nbcftools +fill-tags pon.vcf.gz \\\n    --output-type z \\\n    --output pon.annot.vcf.gz \\\n    -- --tags AC\n\ntabix --preset vcf pon.annot.vcf.gz\n")])])]),a("p",[t._v("Now, "),a("code",[t._v("pon.annot.vcf.gz")]),t._v(" is ready to use to "),a("a",{attrs:{href:"https://github.com/mskcc/vaporware/blob/135719e430b7e7338a1aff25831968b97267b343/pipeline.nf#L931",target:"_blank",rel:"noopener noreferrer"}},[t._v("annotate somatic variant calls from tumor samples"),a("OutboundLink")],1),t._v(".")])])},[],!1,null,null,null);e.default=o.exports}}]);