///EDITED

/*
 * -------------------------------------------------
 * EDITED Nextflow config file for Sarek
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the configuration folder and imported under a
 * profile name here.
 *
 */

manifest {
  author = 'we did'
  description = 'WES & WGS pipeline'
  homePage = 'https://github.com/mskcc/vaporware'
  mainScript = 'pipeline.nf'
  name = 'vaporware'
  nextflowVersion = '>=19.07.0'
  version = '0.21.0'
}

params {
  outDir = "${PWD}"     // Path to output directory, default PWD
  sample =  "test_samples.tsv"   // sample TSV file
  genome = 'GRCh37'     // Default reference genome is GRCh38
  // path to reference files subdirectory
  verbose = false        // Enable for more verbose information, default false
  test = false          // boolean Not testing by default
  markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption
  // see https://github.com/SciLifeLab/Sarek/blob/master/conf/base.config
  singleCPUMem  = 7.GB  // for processes that are using more memory but a single CPU only
  publishDirMode = 'link' // publishDir mode is 'link' by default
  tools = 'delly,facets,mutect2,manta,strelka2,msisensor,haplotypecaller,polysolver,conpair,mutsig,neoantigen,lohhla'
  assayType = "exome" // either 'exome' or 'genome'; default exome
  somatic = false
  germline = false
  debug = false
  outname = 'make_bam_output.tsv'
  publishAll = false
  mapping = false
  pairing = false
  bam_pairing = false
}

// Run profiles are specified with "-profile" at the command line
profiles {

    docker {
        includeConfig "conf/docker.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/resources.config"
        includeConfig "conf/references.config"
    }

    singularity {
        includeConfig "conf/singularity.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/resources.config"
        includeConfig "conf/references.config"
    }

    juno {
        includeConfig "conf/juno.config"
        includeConfig "conf/singularity.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/references.config"

        if(params.assayType == "exome") {
            includeConfig "conf/exome.config"
            includeConfig "conf/resources_juno.config"
        }
        if(params.assayType == "genome") {
            includeConfig "conf/genome.config"
            includeConfig "conf/resources_juno_genome.config"
        }
    }

    awsbatch { 
        includeConfig "conf/awsbatch.config"
        includeConfig "conf/docker.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/resources_aws.config"
        includeConfig "conf/references.config"

        if(params.assayType == "exome") {
            includeConfig "conf/exome.config"
            includeConfig "conf/resources_aws.config"
        }
        if(params.assayType == "genome") {
            includeConfig "conf/genome.config"
            includeConfig "conf/resources_aws_genome.config"
        }
    }

    test_singularity {
        includeConfig "conf/test.config"
        includeConfig "conf/singularity.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/resources.config"
        includeConfig "conf/references.config"
    }

    test {
        includeConfig "conf/test.config"
        includeConfig "conf/docker.config"
        includeConfig "conf/containers.config"
        includeConfig "conf/resources.config"
        includeConfig "conf/references.config"
        if(params.assayType == "exome") {
            includeConfig "conf/exome.config"
        }
        if(params.assayType == "genome") {
            includeConfig "conf/genome.config"
        }
    }
}

trace {
    enabled = true
    file = 'trace.txt'
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

timeline {
    enabled = true
    file = 'timeline.html'
}

report {
    enabled = true
    file = 'report.html'
}

dag {
    enabled = true
    file = 'dag.pdf'
}
