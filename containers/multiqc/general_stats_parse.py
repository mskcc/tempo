#!/opt/conda/envs/multiqc/bin/python3.9

__author__       = "Anne Marie Noronha"
__contributor__  = ""
__email__        = "noronhaa@mskcc.org"
__version__      = "0.0.4"

import pandas as pd
import os, sys, re, json
import argparse
import yaml

def usage():
    parser = argparse.ArgumentParser(description='parse multiqc general stats table to summarize QC status of any given sample. Results printed to "QC_Status.txt"')
    parser.add_argument('--config-file', dest='configYaml', metavar='filename.yaml', type=str, default="multiqc_config.yaml",
                    help='Input config file of multiqc to "read table_cond_formatting_rules"')
    parser.add_argument('--general-stats-input-file', dest='originalgenstats', metavar='filename.txt', type=str, default="multiqc_data/multiqc_general_stats.txt",
                    help='Input general stats file generated by multiqc')
    parser.add_argument('--data-json', dest='dataJson', metavar='filename.json', type=str, default="multiqc_data/multiqc_data.json",
                    help='Input total data file in json format')
    parser.add_argument('--print-criteria', dest="writeCriteria", action="store_true", 
		    help="Use flag to indicate whether or not to print criteria to a separate tab-delimited file.")
    args = parser.parse_args()
    return args

def main():
    args = usage()
    with open(args.configYaml) as file:
        configData = yaml.load(file, Loader=yaml.FullLoader)
    file.close()

    with open(args.dataJson) as file:
        jsonData = json.load(file)
    file.close()

    genStats = pd.read_csv(args.originalgenstats, header=0, sep="\t", index_col=0)
    genStats = genStats.rename(columns=lambda x: re.sub('\w*_mqc-generalstats','mqc-generalstats',x) )

    simpleNames = {}
    suffixDictionary = {}
    titleDictionary  = {}
    for i in jsonData['report_general_stats_headers']:
        for j in i:
            simpleNames[i[j]['rid']] = j
            if 'suffix' in i[j]:
                suffixDictionary[i[j]['rid']] = i[j]['suffix']
                if i[j]['suffix'] == "%":
                    if i[j]['rid']in list(genStats):
                        genStats[i[j]['rid']] = genStats[i[j]['rid']] 
            else: suffixDictionary[i[j]['rid']] = ""
            if 'title' in i[j]:
                titleDictionary[i[j]['rid']] = i[j]['title']

    print(list(genStats))

    print(configData["table_cond_formatting_rules"])
    criteriaTab = genCriteriaTable(configData["table_cond_formatting_rules"], suffixDictionary)
    criteriaTab = criteriaTab.filter(like="mqc-generalstats", axis = 0)
    criteriaTab = criteriaTab.filter(list(genStats), axis=0)
    criteriaTab["metric"] = [titleDictionary.get(i,simpleNames.get(i,i)) for i in criteriaTab.index ]
    criteriaTab = criteriaTab.reset_index(drop=True).set_index('metric')
    
    qcStatus = pd.DataFrame(columns=["Status","Reason"])
    
    for index, row in genStats.iterrows():
        if "@" in index:
            continue
        statusIter = dict()
        for i in configData["table_cond_formatting_rules"]:
            if i in list(genStats):
                if not pd.isnull(row[i]):
                    statusIter[i] = assessDataPoint(row[i],configData["table_cond_formatting_rules"][i])
                    print(statusIter)
        sampleStatus = "pass"
        for p in ["warn","fail"]:
            if p in statusIter.values():
                sampleStatus = p
        #reasons = [ simpleNames[k] + " " + statusIter[k] + ": " + criteriaTab.loc[simpleNames[k]][statusIter[k]] for k in statusIter.keys() if statusIter[k] in ["warn","fail"] ]
        reasons = ""
        reasonsWarn = [ simpleNames[k] for k in statusIter.keys() if statusIter[k] == "warn" ] 
        reasonsFail = [ simpleNames[k] for k in statusIter.keys() if statusIter[k] == "fail" ]
        if len(reasonsFail) + len(reasonsWarn) > 0:
            reasons = "; ".join(reasons)
            if len(reasonsFail) > 0:
                reasons += "fail: " + "; ".join(reasonsFail)
            if len(reasonsWarn) > 0:
                reasons += "warn: " + "; ".join(reasonsWarn) 
        else:
            reasons = "Passed Tempo Criteria" 
        qcStatus = qcStatus.append(pd.Series({"Status":sampleStatus, "Reason": reasons }, name=index))

    print("printing QC status to \"genstats-QC_Status.txt\"")
    qcStatus.to_csv("genstats-QC_Status.txt",index=True, sep="\t")

    if args.writeCriteria:
       print("printing Criteria Table to \"CriteriaTable.txt\"")
       criteriaTab.to_csv("CriteriaTable.txt",index=True, sep="\t")

def assessDataPoint(dataPoint,PF_metrics):
    truth = list()
    for i in ["pass","warn","fail"]:
        if i in PF_metrics:
            for j in PF_metrics[i]:
                for k in j:
                    if k in ["s_eq", "eq"]:
                        if dataPoint == j[k]:
                            truth.append(i)
                    elif k in ["s_ne","ne"]:
                        if dataPoint != j[k]:
                            truth.append(i)
                    elif k in ["s_contains"]:
                        if j[k] in dataPoint:
                            truth.append(i) 
                    elif k in ["gt"]:
                        if dataPoint > j[k]:
                            truth.append(i)
                    else: 
                        if dataPoint < j[k]:
                            truth.append(i)
    for p in ["fail","warn"]:
        if p in truth:
            return p
    return "pass"

def genCriteriaTable(criteriaJson, suffixDictionary):
    tab = pd.DataFrame(columns=["pass","warn","fail"])
    for i in criteriaJson: # column name
        status = {}
        for j in criteriaJson[i]: #pass warn fail
            exprs = []
            for k in criteriaJson[i][j]: #iterates dicts which have eval expressions
                for l in k:
                    if l in ["s_eq", "eq"]:
                        exprs += ["= {}".format(k[l])]
                    elif l in ["s_ne","ne"]:
                        exprs += ["!= {}".format(k[l])]
                    elif l in ["s_contains"]:
                        exprs += ["contains {}".format(k[l])]
                    elif l in ["gt"]:
                        exprs += ["> {}".format(k[l])]
                    else: 
                        exprs += ["< {}".format(k[l])]
            status[j] = " or ".join(exprs)
            if suffixDictionary.get(i,"") != "":
                status[j] += " {}".format(suffixDictionary[i])
        tab = tab.append(pd.Series(status, name=i))
    return tab

if __name__ == "__main__":
    main()
